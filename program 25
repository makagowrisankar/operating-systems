Construct a C program to implement the I/O system calls of UNIX (fcntl, seek, stat, opendir, readdir)
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>
#include <sys/types.h>
#include <sys/stat.h>
#include <dirent.h>

int main() {
    int fd; // File descriptor
    ssize_t numBytes;
    char buffer[1024];

    // Open file using open() system call
    fd = open("example.txt", O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }
    printf("File opened successfully.\n");

    // Write data to the file using write() system call
    numBytes = write(fd, "Hello, World!\n", 14);
    if (numBytes == -1) {
        perror("write");
        exit(EXIT_FAILURE);
    }
    printf("Data written to file.\n");

    // Seek to the beginning of the file using lseek() system call
    if (lseek(fd, 0, SEEK_SET) == -1) {
        perror("lseek");
        exit(EXIT_FAILURE);
    }

    // Read data from the file using read() system call
    numBytes = read(fd, buffer, sizeof(buffer));
    if (numBytes == -1) {
        perror("read");
        exit(EXIT_FAILURE);
    }
    buffer[numBytes] = '\0'; // Null terminate the buffer
    printf("Data read from file: %s", buffer);

    // Close the file using close() system call
    if (close(fd) == -1) {
        perror("close");
        exit(EXIT_FAILURE);
    }
    printf("File closed successfully.\n");

    // Get file information using stat() system call
    struct stat fileStat;
    if (stat("example.txt", &fileStat) == -1) {
        perror("stat");
        exit(EXIT_FAILURE);
    }
    printf("File size: %lld bytes\n", (long long)fileStat.st_size);
    printf("File permissions: %o\n", fileStat.st_mode);

    // Open directory using opendir() system call
    DIR *dir = opendir(".");
    if (dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }
    printf("Directory opened successfully.\n");

    // Read directory entries using readdir() system call
    struct dirent *entry;
    printf("Directory contents:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    // Close directory using closedir() system call
    if (closedir(dir) == -1) {
        perror("closedir");
        exit(EXIT_FAILURE);
    }
    printf("Directory closed successfully.\n");

    return 0;
}
