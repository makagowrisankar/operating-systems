Design a C program to implement process synchronization using mutex locks
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>

#define NUM_THREADS 2
#define NUM_INCREMENTS 1000000

int sharedCounter = 0;
pthread_mutex_t mutex;

void *incrementCounter(void *threadID) {
    int tid = *((int *)threadID);
    for (int i = 0; i < NUM_INCREMENTS; i++) {
        pthread_mutex_lock(&mutex); // Lock the critical section
        sharedCounter++;            // Modify the shared resource
        pthread_mutex_unlock(&mutex); // Unlock the critical section
    }
    printf("Thread %d has finished incrementing the counter.\n", tid);
    pthread_exit(NULL);
}

int main() {
    pthread_t threads[NUM_THREADS];
    int threadIDs[NUM_THREADS];

    // Initialize mutex
    if (pthread_mutex_init(&mutex, NULL) != 0) {
        printf("Mutex initialization failed.\n");
        return 1;
    }

    // Create threads
    for (int i = 0; i < NUM_THREADS; i++) {
        threadIDs[i] = i;
        int result = pthread_create(&threads[i], NULL, incrementCounter, (void *)&threadIDs[i]);
        if (result != 0) {
            printf("Thread creation failed: %d\n", result);
            return 1;
        }
    }

    // Join threads
    for (int i = 0; i < NUM_THREADS; i++) {
        pthread_join(threads[i], NULL);
    }

    // Destroy mutex
    pthread_mutex_destroy(&mutex);

    printf("Final value of the shared counter: %d\n", sharedCounter);

    return 0;
}

