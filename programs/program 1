#include <stdio.h>
#include <unistd.h>

int main() {
    pid_t pid, parent_pid;

    // Get the process identifier of the currently running process
    pid = getpid();

    // Get the process identifier of the parent process
    parent_pid = getppid();

    printf("Current process ID: %d\n", pid);
    printf("Parent process ID: %d\n", parent_pid);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>
#include <fcntl.h>
#include <unistd.h>

#define BUFFER_SIZE 4096

int main() {
    const char *sourcefile ="C:\\Users\\ecute\\OneDrive\\Desktop\\aj.txt";
    const char *destination_file ="C:\\Users\\ecute\\OneDrive\\Desktop\\ajay.txt";
    // Open source file for reading
    int source_fd = open(sourcefile, O_RDONLY);
    if (source_fd == -1) {
        perror("Error opening source file");
        return 1;
    }

    // Create or open destination file for writing
    int dest_fd = open(destination_file, O_WRONLY | O_CREAT | O_TRUNC, 0666);
    if (dest_fd == -1) {
        perror("Error opening destination file");
        close(source_fd);
        return 1;
    }

    char buffer[BUFFER_SIZE];
    ssize_t bytesRead, bytesWritten;

    // Read from source file and write to destination file
    while ((bytesRead = read(source_fd, buffer, BUFFER_SIZE)) > 0) {
        bytesWritten = write(dest_fd, buffer, bytesRead);
        if (bytesWritten != bytesRead) {
            perror("Error writing to destination file");
            close(source_fd);
            close(dest_fd);
            return 1;
        }
    }

    // Check for read error
    if (bytesRead == -1) {
        perror("Error reading from source file");
        close(source_fd);
        close(dest_fd);
        return 1;
    }

    // Close file descriptors
    close(source_fd);
    close(dest_fd);

    printf("File copied successfully.\n");
    return 0;
}
#include <stdio.h>

// Structure to represent a process
struct Process {
    int process_id;     // Process ID
    int arrival_time;   // Arrival time
    int burst_time;     // Burst time
};

// Function to execute processes using FCFS scheduling
void executeFCFS(struct Process processes[], int n) {
    int total_waiting_time = 0;  // Total waiting time
    int total_turnaround_time = 0;  // Total turnaround time

    int current_time = 0;  // Current time

    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        // Calculate waiting time for the current process
        int waiting_time = current_time - processes[i].arrival_time;

        if (waiting_time < 0) {
            // The process has not arrived yet, so the waiting time is 0.
            waiting_time = 0;
        }

        // Calculate turnaround time for the current process
        int turnaround_time = waiting_time + processes[i].burst_time;

        // Update total waiting and turnaround times
        total_waiting_time += waiting_time;
        total_turnaround_time += turnaround_time;

        // Print process details
        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].process_id, processes[i].arrival_time, processes[i].burst_time, waiting_time, turnaround_time);

        // Move the current time forward
        current_time += processes[i].burst_time;
    }

    // Calculate and print average waiting and turnaround times
    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n;  // Number of processes

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    struct Process processes[n];  // Array to store processes

    // Input process details
    for (int i = 0; i < n; i++) {
        processes[i].process_id = i + 1;
        processes[i].arrival_time = 0;  // All processes are activated at time 0.
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &processes[i].burst_time);
    }

    // Execute processes using FCFS scheduling
    executeFCFS(processes, n);

    return 0;
}
#include <stdio.h>

void executeFCFS(int process_ids[], int arrival_times[], int burst_times[], int n) {
    int total_waiting_time = 0;  // Total waiting time
    int total_turnaround_time = 0;  // Total turnaround time

    int current_time = 0;

    printf("Process\tArrival Time\tBurst Time\tWaiting Time\tTurnaround Time\n");

    for (int i = 0; i < n; i++) {
        int waiting_time = current_time - arrival_times[i];
        if (waiting_time < 0) {
            waiting_time = 0;
        }

        int turnaround_time = waiting_time + burst_times[i];

        total_waiting_time += waiting_time;
        total_turnaround_time += turnaround_time;

        printf("P%d\t\t%d\t\t%d\t\t%d\t\t%d\n", process_ids[i], arrival_times[i], burst_times[i], waiting_time, turnaround_time);

        current_time += burst_times[i];
    }

    float avg_waiting_time = (float)total_waiting_time / n;
    float avg_turnaround_time = (float)total_turnaround_time / n;

    printf("\nAverage Waiting Time: %.2f\n", avg_waiting_time);
    printf("Average Turnaround Time: %.2f\n", avg_turnaround_time);
}

int main() {
    int n;  // Number of processes

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    int process_ids[n];
    int arrival_times[n];
    int burst_times[n];

    // Input process details
    for (int i = 0; i < n; i++) {
        process_ids[i] = i + 1;
        arrival_times[i] = 0;
        printf("Enter burst time for process P%d: ", i + 1);
        scanf("%d", &burst_times[i]);
    }

    executeFCFS(process_ids, arrival_times, burst_times, n);

    return 0;
}
#include <stdio.h>

#define MAX_PROCESSES 10

// Process structure
typedef struct {
    int pid; // Process ID
    int arrival_time; // Arrival time
    int burst_time; // Burst time
    int completion_time; // Completion time
    int turnaround_time; // Turnaround time
    int waiting_time; // Waiting time
    int executed; // Flag to mark if the process has been executed
} Process;

// Function prototypes
void sjf(Process processes[], int n);
void display_results(Process processes[], int n);

int main() {
    Process processes[MAX_PROCESSES];
    int n, i;

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input the process details
    for (i = 0; i < n; i++) {
        printf("Enter arrival time and burst time for process %d: ", i + 1);
        scanf("%d %d", &processes[i].arrival_time, &processes[i].burst_time);
        processes[i].pid = i + 1;
        processes[i].executed = 0;
    }

    // Run the SJF scheduling algorithm
    sjf(processes, n);

    // Display the results
    display_results(processes, n);

    return 0;
}

// Shortest Job First (SJF) scheduling algorithm
void sjf(Process processes[], int n) {
    int current_time = 0;
    int remaining_processes = n;

    while (remaining_processes > 0) {
        int shortest_burst_index = -1;
        int shortest_burst = _INT_MAX_;

        // Find the process with the shortest burst time that has arrived
        for (int i = 0; i < n; i++) {
            if (!processes[i].executed && processes[i].arrival_time <= current_time && processes[i].burst_time < shortest_burst) {
                shortest_burst = processes[i].burst_time;
                shortest_burst_index = i;
            }
        }

        if (shortest_burst_index == -1) {
            current_time++; // No process to execute, move to the next time unit
        } else {
            // Execute the selected process
            current_time += processes[shortest_burst_index].burst_time;
            processes[shortest_burst_index].completion_time = current_time;
            processes[shortest_burst_index].turnaround_time = processes[shortest_burst_index].completion_time - processes[shortest_burst_index].arrival_time;
            processes[shortest_burst_index].waiting_time = processes[shortest_burst_index].turnaround_time - processes[shortest_burst_index].burst_time;
            processes[shortest_burst_index].executed = 1;
            remaining_processes--;
        }
    }
}

// Display results
void display_results(Process processes[], int n) {
    float avg_turnaround_time = 0, avg_waiting_time = 0;

    printf("\nProcess\t Arrival Time\t Burst Time\t Completion Time\t Turnaround Time\t Waiting Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t %d\t\t %d\t\t %d\t\t\t %d\t\t\t %d\n", processes[i].pid, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time,
               processes[i].waiting_time);

        avg_turnaround_time += processes[i].turnaround_time;
        avg_waiting_time += processes[i].waiting_time;
    }

    avg_turnaround_time /= n;
    avg_waiting_time /= n;

    printf("\nAverage Turnaround Time: %.2f\n", avg_turnaround_time);
    printf("Average Waiting Time: %.2f\n", avg_waiting_time);
}
#include <stdio.h>

#define MAX_PROCESSES 10

struct Process {
    int id;
    int priority;
    int burst_time;
    int completion_time;
};

void calculateCompletionTimes(struct Process processes[], int n) {
    int current_time = 0;
    for (int i = 0; i < n; i++) {
        processes[i].completion_time = current_time + processes[i].burst_time;
        current_time = processes[i].completion_time;
    }
}

void printCompletionTimes(struct Process processes[], int n) {
    printf("Process ID\tPriority\tBurst Time\tCompletion Time\n");
    for (int i = 0; i < n; i++) {
        printf("%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].priority,
               processes[i].burst_time, processes[i].completion_time);
    }
}

int main() {
    struct Process processes[MAX_PROCESSES];
    int n;

    // Input the number of processes
    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input details of each process
    printf("Enter priority and burst time for each process:\n");
    for (int i = 0; i < n; i++) {
        processes[i].id = i + 1;
        printf("Process %d: ", processes[i].id);
        scanf("%d %d", &processes[i].priority, &processes[i].burst_time);
    }

    // Calculate completion times for each process
    calculateCompletionTimes(processes, n);

    // Print completion times
    printf("\nPriority-based Scheduling:\n");
    printCompletionTimes(processes, n);

    return 0;
}
#include <stdio.h>
#include <stdlib.h>

#define MAX_PROCESSES 10

// Structure to represent a process
typedef struct {
    int id;
    int arrival_time;
    int burst_time;
    int priority;
    int remaining_time;
} Process;

// Function prototypes
void preemptivePriorityScheduling(Process processes[], int n);

int main() {
    int n, i;
    Process processes[MAX_PROCESSES];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input the details of processes
    for (i = 0; i < n; i++) {
        printf("Enter details for Process %d:\n", i + 1);
        processes[i].id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        printf("Priority: ");
        scanf("%d", &processes[i].priority);
        processes[i].remaining_time = processes[i].burst_time;
    }

    preemptivePriorityScheduling(processes, n);

    return 0;
}

// Preemptive Priority Scheduling Algorithm
void preemptivePriorityScheduling(Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;
    int i;

    while (completed < n) {
        int highestPriority = -1;
        int selectedProcess = -1;

        // Find the process with the highest priority among the arrived processes
        for (i = 0; i < n; i++) {
            if (processes[i].arrival_time <= currentTime && processes[i].remaining_time > 0) {
                if (highestPriority == -1 || processes[i].priority < highestPriority) {
                    highestPriority = processes[i].priority;
                    selectedProcess = i;
                }
            }
        }

        // No process is available at the current time
        if (selectedProcess == -1) {
            printf("Time %d: Idle\n", currentTime);
            currentTime++;
        } else {
            // Execute the selected process for 1 unit of time
            printf("Time %d: Executing Process %d\n", currentTime, processes[selectedProcess].id);
            processes[selectedProcess].remaining_time--;
            currentTime++;

            // If the process is completed
            if (processes[selectedProcess].remaining_time == 0) {
                completed++;
                printf("Process %d completed at time %d\n", processes[selectedProcess].id, currentTime);
            }
        }
    }
}
#include <stdio.h>

// Structure to represent a process
typedef struct {
    int id;
    int arrival_time;
    int burst_time;
    int completion_time;
    int turnaround_time;
    int waiting_time;
    int is_completed;
} Process;

// Function prototypes
void sjf(Process processes[], int n);
void swap(Process *a, Process *b);
void calculateTimes(Process processes[], int n);

int main() {
    int n, i;
    Process processes[50];

    printf("Enter the number of processes: ");
    scanf("%d", &n);

    // Input the details of processes
    for (i = 0; i < n; i++) {
        printf("Enter details for Process %d:\n", i + 1);
        processes[i].id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].is_completed = 0;
    }

    sjf(processes, n);

    // Display the details of processes after scheduling
    printf("\nProcess\tArrival Time\tBurst Time\tCompletion Time\tTurnaround Time\tWaiting Time\n");
    for (i = 0; i < n; i++) {
        printf("%d\t%d\t\t%d\t\t%d\t\t%d\t\t%d\n", processes[i].id, processes[i].arrival_time,
               processes[i].burst_time, processes[i].completion_time, processes[i].turnaround_time,
               processes[i].waiting_time);
    }

    return 0;
}

// Non-Preemptive Shortest Job First (SJF) Scheduling Algorithm
void sjf(Process processes[], int n) {
    int currentTime = 0;
    int completed = 0;
    int shortestJobIndex;

    // Sort the processes based on arrival time
    int i, j;
    for (i = 0; i < n - 1; i++) {
        for (j = 0; j < n - i - 1; j++) {
            if (processes[j].arrival_time > processes[j + 1].arrival_time) {
                swap(&processes[j], &processes[j + 1]);
            }
        }
    }

    // Schedule the processes
    while (completed < n) {
        shortestJobIndex = -1;
        int shortestJobBurst = 9999;

        // Find the shortest job that has arrived
        for (i = 0; i < n; i++) {
            if (!processes[i].is_completed && processes[i].arrival_time <= currentTime &&
                processes[i].burst_time < shortestJobBurst) {
                shortestJobIndex = i;
                shortestJobBurst = processes[i].burst_time;
            }
        }

        if (shortestJobIndex != -1) {
            currentTime += processes[shortestJobIndex].burst_time;
            processes[shortestJobIndex].completion_time = currentTime;
            processes[shortestJobIndex].turnaround_time = processes[shortestJobIndex].completion_time -
                                                           processes[shortestJobIndex].arrival_time;
            processes[shortestJobIndex].waiting_time = processes[shortestJobIndex].turnaround_time -
                                                        processes[shortestJobIndex].burst_time;
            processes[shortestJobIndex].is_completed = 1;
            completed++;
        } else {
            currentTime++;
        }
    }
}

// Swap two processes
void swap(Process *a, Process *b) {
    Process temp = *a;
    *a = *b;
    *b = temp;
}
#include <stdio.h>
#include <stdlib.h>

// Process structure
typedef struct Process {
    int id;             // Process ID
    int arrival_time;   // Arrival time of the process
    int burst_time;     // Burst time of the process
    int remaining_time; // Remaining burst time of the process
} Process;

// Function prototypes
void roundRobin(Process processes[], int n, int quantum);

int main() {
    int n, quantum, i;
    
    // Input number of processes and time quantum
    printf("Enter the number of processes: ");
    scanf("%d", &n);
    
    Process processes[n];
    
    // Input details of each process
    for (i = 0; i < n; i++) {
        printf("Enter details for Process %d:\n", i + 1);
        processes[i].id = i + 1;
        printf("Arrival Time: ");
        scanf("%d", &processes[i].arrival_time);
        printf("Burst Time: ");
        scanf("%d", &processes[i].burst_time);
        processes[i].remaining_time = processes[i].burst_time;
    }
    
    // Input time quantum
    printf("Enter the time quantum: ");
    scanf("%d", &quantum);
    
    // Perform Round Robin scheduling
    roundRobin(processes, n, quantum);
    
    return 0;
}

// Round Robin scheduling algorithm
void roundRobin(Process processes[], int n, int quantum) {
    int remaining_time[n], turnaround_time[n], waiting_time[n];
    int time = 0, i, flag = 0;
    float total_turnaround_time = 0, total_waiting_time = 0;

    // Initialize remaining_time array with burst times
    for (i = 0; i < n; i++) {
        remaining_time[i] = processes[i].burst_time;
    }

    // Simulate Round Robin until all processes are done
    while (1) {
        flag = 0;
        for (i = 0; i < n; i++) {
            if (remaining_time[i] > 0) {
                flag = 1;
                if (remaining_time[i] > quantum) {
                    time += quantum;
                    remaining_time[i] -= quantum;
                } else {
                    time += remaining_time[i];
                    waiting_time[i] = time - processes[i].burst_time - processes[i].arrival_time;
                    remaining_time[i] = 0;
                    turnaround_time[i] = time - processes[i].arrival_time;
                }
            }
        }
        if (flag == 0) {
            break;
        }
    }

    // Calculate total turnaround and waiting time
    for (i = 0; i < n; i++) {
        total_turnaround_time += turnaround_time[i];
        total_waiting_time += waiting_time[i];
    }

    // Calculate and print average turnaround and waiting time
    printf("\nAverage Turnaround Time: %.2f\n", total_turnaround_time / n);
    printf("Average Waiting Time: %.2f\n", total_waiting_time / n);
}
