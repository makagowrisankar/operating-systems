Construct a C program to implement the file management operations.
#include <stdio.h>
#include <stdlib.h>
#include <unistd.h>
#include <fcntl.h>
#include <sys/stat.h>
#include <sys/types.h>
#include <dirent.h>

#define BUFFER_SIZE 1024

int main() {
    int fd; // File descriptor
    ssize_t numBytes;
    char buffer[BUFFER_SIZE];

    // Open or create a new file for writing
    fd = open("example.txt", O_WRONLY | O_CREAT | O_TRUNC, S_IRUSR | S_IWUSR);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }
    printf("File 'example.txt' opened for writing.\n");

    // Write data to the file
    numBytes = write(fd, "Hello, World!\n", 14);
    if (numBytes == -1) {
        perror("write");
        exit(EXIT_FAILURE);
    }
    printf("Data written to file.\n");

    // Close the file
    if (close(fd) == -1) {
        perror("close");
        exit(EXIT_FAILURE);
    }
    printf("File closed successfully.\n");

    // Open the file for reading
    fd = open("example.txt", O_RDONLY);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    // Read data from the file
    numBytes = read(fd, buffer, BUFFER_SIZE);
    if (numBytes == -1) {
        perror("read");
        exit(EXIT_FAILURE);
    }
    buffer[numBytes] = '\0'; // Null terminate the buffer
    printf("Data read from file: %s", buffer);

    // Close the file
    if (close(fd) == -1) {
        perror("close");
        exit(EXIT_FAILURE);
    }
    printf("File closed successfully.\n");

    // Change the file offset using lseek
    fd = open("example.txt", O_RDONLY);
    if (fd == -1) {
        perror("open");
        exit(EXIT_FAILURE);
    }

    if (lseek(fd, 0, SEEK_SET) == -1) { // Seek to the beginning of the file
        perror("lseek");
        exit(EXIT_FAILURE);
    }

    // Read data from the file again
    numBytes = read(fd, buffer, BUFFER_SIZE);
    if (numBytes == -1) {
        perror("read");
        exit(EXIT_FAILURE);
    }
    buffer[numBytes] = '\0'; // Null terminate the buffer
    printf("Data read from file after seeking: %s", buffer);

    // Close the file
    if (close(fd) == -1) {
        perror("close");
        exit(EXIT_FAILURE);
    }
    printf("File closed successfully.\n");

    // Get file information using stat
    struct stat fileStat;
    if (stat("example.txt", &fileStat) == -1) {
        perror("stat");
        exit(EXIT_FAILURE);
    }
    printf("File size: %ld bytes\n", fileStat.st_size);

    // Open a directory and list its contents using opendir and readdir
    DIR *dir;
    struct dirent *entry;

    dir = opendir(".");
    if (dir == NULL) {
        perror("opendir");
        exit(EXIT_FAILURE);
    }

    printf("Contents of current directory:\n");
    while ((entry = readdir(dir)) != NULL) {
        printf("%s\n", entry->d_name);
    }

    closedir(dir);

    return 0;
}
