Construct a C program to simulate Reader-Writer problem using Semaphores.
#include <stdio.h>
#include <stdlib.h>
#include <pthread.h>
#include <semaphore.h>
#include <unistd.h>

#define NUM_READERS 5
#define NUM_WRITERS 2

sem_t mutex, writeLock;
int readersCount = 0;
int sharedResource = 0;

void *reader(void *arg) {
    int readerID = *((int *)arg);
    while (1) {
        // Entry section
        sem_wait(&mutex);
        readersCount++;
        if (readersCount == 1) {
            sem_wait(&writeLock);
        }
        sem_post(&mutex);

        // Critical section (reading)
        printf("Reader %d is reading the shared resource: %d\n", readerID, sharedResource);
        sleep(1); // Simulating reading

        // Exit section
        sem_wait(&mutex);
        readersCount--;
        if (readersCount == 0) {
            sem_post(&writeLock);
        }
        sem_post(&mutex);

        // Non-critical section
        sleep(rand() % 3); // Reader resting
    }
}

void *writer(void *arg) {
    int writerID = *((int *)arg);
    while (1) {
        // Entry section
        sem_wait(&writeLock);

        // Critical section (writing)
        sharedResource++;
        printf("Writer %d is writing to the shared resource: %d\n", writerID, sharedResource);
        sleep(2); // Simulating writing

        // Exit section
        sem_post(&writeLock);

        // Non-critical section
        sleep(rand() % 5); // Writer resting
    }
}

int main() {
    pthread_t readers[NUM_READERS], writers[NUM_WRITERS];
    int readerIDs[NUM_READERS], writerIDs[NUM_WRITERS];

    // Initialize semaphores
    sem_init(&mutex, 0, 1);
    sem_init(&writeLock, 0, 1);

    // Create reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        readerIDs[i] = i + 1;
        pthread_create(&readers[i], NULL, reader, &readerIDs[i]);
    }

    // Create writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        writerIDs[i] = i + 1;
        pthread_create(&writers[i], NULL, writer, &writerIDs[i]);
    }

    // Join reader threads
    for (int i = 0; i < NUM_READERS; i++) {
        pthread_join(readers[i], NULL);
    }

    // Join writer threads
    for (int i = 0; i < NUM_WRITERS; i++) {
        pthread_join(writers[i], NULL);
    }

    // Destroy semaphores
    sem_destroy(&mutex);
    sem_destroy(&writeLock);

    return 0;
}
